from enum import IntEnum
import random


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class Action(IntEnum):
    Rock = 1
    Paper = 2
    Scissors = 3


class Game(object):

    def __init__(self, number_of_rounds):
        self.number_of_rounds = number_of_rounds
        self.rounds_played = 0
        self.human_player = self.set_human_player()
        self.computer_player = self.set_computer_player()
        print(
            f'\nIn todays game we have {self.human_player.get_name()} '
            f'facing off against {self.computer_player.get_name()} for '
            f'{self.number_of_rounds} rounds\n'.upper())
        if number_of_rounds == 1:
            self.single_game_round()
        else:
            self.multiple_game_rounds()

    def set_human_player(self):
        name = input(f"\n{bcolors.OKGREEN}Please enter your name:{bcolors.ENDC}")
        return Human(name)

    def set_computer_player(self):
        computer_players = []
        computer_players.append(RockOnly())
        computer_players.append(RandomMan())
        computer_players.append(MemoryMan())
        computer_players.append(CycleMan())
        return random.choice(computer_players)

    def single_game_round(self):
        # players select move.
        self.human_player.move()
        self.computer_player.move()

        # display move
        self.display_move(self.human_player)
        self.display_move(self.computer_player)

        # check who wins
        self.determine_winner(self.human_player, self.computer_player)

        # increase rounds played
        self.rounds_played += 1

        # display current score & rounds played
        self.display_current_score_and_rounds(self.human_player, self.computer_player)

        # If Human VS MemoryMan - Set MemoryMan's Next move to Humnans Previous
        if self.computer_player.get_name() == 'MemoryMan':
            self.computer_player.set_next_move(self.human_player.get_previous_move())

    def multiple_game_rounds(self):
        while self.rounds_played < self.number_of_rounds:
            self.single_game_round()

    def display_move(self, player):
        move = player.get_previous_move()
        print('--------------------------------')
        print(f"{bcolors.FAIL}{player.get_name()} selected {move.name}!{bcolors.ENDC}")
        if move == Action.Rock:
            print(f"""{bcolors.BOLD}
    _______
---'   ____)
      (_____)
      (_____)
      (____)
---.__(___)
            {bcolors.ENDC}""")
        if move == Action.Paper:
            print(f"""{bcolors.BOLD}
     _______
---'    ____)____
           ______)
          _______)
         _______)
---.__________)
            {bcolors.ENDC}""")
        if move == Action.Scissors:
            print(f"""{bcolors.BOLD}
    _______
---'   ____)____
          ______)
       __________)
      (____)
---.__(___)
            {bcolors.ENDC}""")
        print('--------------------------------')

    def display_current_score_and_rounds(self, human_player, computer_player):
        print('--------------------------------')
        print(f'{bcolors.HEADER}Rounds Played: {self.rounds_played}{bcolors.ENDC}')
        print(f'{bcolors.HEADER}{human_player.get_name()}s Score: {human_player.get_score()}{bcolors.ENDC}')
        print(f'{bcolors.HEADER}{computer_player.get_name()}s Score: {computer_player.get_score()}{bcolors.ENDC}')
        print('--------------------------------')

    def determine_winner(self, human_player, computer_player):
        human_action = human_player.get_previous_move()
        computer_action = computer_player.get_previous_move()
        if human_action == computer_action:
            print(f"Both players selected {human_action.name}. It's a tie!")
        elif human_action == Action.Rock:
            if computer_action == Action.Scissors:
                human_player.increase_score()
                print(f"{human_player.get_name()} uses {human_action.name} and smashes {computer_player.get_name()}'s {computer_action.name}")
            else:
                computer_player.increase_score()
                print(f"{computer_player.get_name()} uses {computer_action.name} and smothers {human_player.get_name()}'s {human_action.name}")
        elif human_action == Action.Paper:
            if computer_action == Action.Rock:
                human_player.increase_score()
                print(f"{human_player.get_name()} uses {human_action.name} and smothers {computer_player.get_name()}'s {computer_action.name}")
            else:
                computer_player.increase_score()
                print(f"{computer_player.get_name()} uses {computer_action.name} and cuts {human_player.get_name()}'s {human_action.name} in half")
        elif human_action == Action.Scissors:
            if computer_action == Action.Paper:
                human_player.increase_score()
                print(f"{human_player.get_name()} uses {human_action.name} and cuts {computer_player.get_name()}'s {computer_action.name} in half")
            else:
                computer_player.increase_score()
                print(f"{computer_player.get_name()} uses {computer_action.name} and smashes {human_player.get_name()}'s {human_action.name}")


class Player(object):

    def __init__(self, name=None, previous_move=None, score=0):
        self.name = name
        self.previous_move = previous_move
        self.score = score

    def get_name(self):
        return self.name

    def get_previous_move(self):
        return self.previous_move

    def increase_score(self):
        self.score += 1

    def get_score(self):
        return self.score


class RockOnly(Player):
    def __init__(self):
        super().__init__()
        self.name = 'RockLord'
        self.previous_move = Action(1)

    def move(self):
        return Action(1)


class RandomMan(Player):
    def __init__(self):
        super().__init__()
        self.name = 'RandMan'

    def move(self):
        selection = random.randint(1, len(Action))
        action = Action(selection)
        self.previous_move = action
        return action


class Human(Player):
    def __init__(self, name):
        super().__init__(name)

    def move(self):
        try:
            choices = [f"{action.name}[{action.value}]" for action in Action]
            choices_str = ", ".join(choices)
            selection = int(input(f"{bcolors.OKBLUE}Please select your move {self.name} ({choices_str}): {bcolors.ENDC}"))
            action = Action(selection)
            self.previous_move = action
            return action
        except ValueError:
            print("Invalid selection, please try again")
            action = self.move()
            self.previous_move = action
            return action


class MemoryMan(Player):
    def __init__(self):
        super().__init__()
        self.name = 'MemoryMan'
        self.next_move = None

    def set_next_move(self, next_move):
        self.next_move = next_move

    def move(self):
        if not self.next_move:
            selection = random.randint(1, len(Action))
            action = Action(selection)
            self.previous_move = action
            return action
        else:
            action = Action(self.next_move)
            self.previous_move = action
            return action


class CycleMan(Player):
    def __init__(self):
        super().__init__()
        self.name = 'CycleMan'

    def move(self):
        if not self.previous_move:
            action = Action(1)
            self.previous_move = action
            return action

        if self.previous_move.value == len(Action):
            action = Action(1)
            self.previous_move = action
            return action
        else:
            action = Action(self.previous_move.value + 1)
            self.previous_move = action
            return action

